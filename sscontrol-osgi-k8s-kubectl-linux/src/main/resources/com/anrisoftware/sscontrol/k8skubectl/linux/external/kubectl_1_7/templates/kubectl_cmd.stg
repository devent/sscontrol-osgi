kubectlKubeconfigCmd(parent, vars) ::= <<
<parent.kubectlCmd> --kubeconfig=<vars.kubeconfigFile> <vars.args>
>>

/*
* Waits until the node is ready.
*
* parent.kubectlCmd: the kubectl command.
* parent.robobeeLabelNode: the robobee node name label key.
* vars.kubeconfigFile: the kubeconfig file path.
* vars.node: the node name.
*/
waitNodeReadyCmd(parent, vars) ::= <<
echo "Waiting for node..."
until <parent.kubectlCmd> --kubeconfig=<vars.kubeconfigFile> get nodes --no-headers -l <parent.robobeeLabelNode>=<vars.node>|grep "Ready"
do
    sleep 5
done
>>

/*
* Applies the taint on the node.
*
* parent.kubectlCmd: the kubectl command.
* parent.robobeeLabelNode: the robobee node name label key.
* vars.kubeconfigFile: the kubeconfig file path.
* vars.node: the node name.
* vars.tain: the taint.
*/
applyTaintCmd(parent, vars) ::= <<
node=$(<parent.kubectlCmd> --kubeconfig=<vars.kubeconfigFile> get nodes --no-headers -l <parent.robobeeLabelNode>=<vars.node> | cut -f1 -d' ')
until <parent.kubectlCmd> describe nodes ${node} | grep `echo "<vars.taint>" | sed "s/=:/:/"`; do
<parent.kubectlCmd> --kubeconfig=<vars.kubeconfigFile> taint --overwrite nodes $node <vars.taint>
done
>>

/*
* Applies the label on the node.
*
* parent.kubectlCmd: the kubectl command.
* parent.robobeeLabelNode: the robobee node name label key.
* vars.kubeconfigFile: the kubeconfig file path.
* vars.node: the node name.
* vars.label: the label.
*/
applyLabelCmd(parent, vars) ::= <<
node=$(<parent.kubectlCmd> --kubeconfig=<vars.kubeconfigFile> get nodes --no-headers -l <parent.robobeeLabelNode>=<vars.node> | cut -f1 -d' ')
<parent.kubectlCmd> --kubeconfig=<vars.kubeconfigFile> label --overwrite nodes $node <vars.label>
>>

setupKubectl(parent, vars) ::= <<
<parent.kubectlCmd> config use-context <vars.cluster.context.name>
if [[ $? != 0 ]]; then
<setCluster(parent, vars)>
<setCredentials(parent, vars)>
<setContext(parent, vars)>
<parent.kubectlCmd> config use-context <vars.cluster.context.name>
fi

>>

setCluster(parent, vars) ::= <<
<parent.kubectlCmd> config set-cluster <vars.cluster.cluster.group> --server="<clusterServer(parent, vars);separator=",">" <kubeCa(parent, vars)>

>>

setCredentials(parent, vars) ::= <<
<parent.kubectlCmd> config set-credentials <vars.cluster.cluster.group>-<vars.cluster.credentials.name> <kubeCa(parent, vars)> <kubeCert(parent, vars)> <kubeKey(parent, vars)>

>>

setContext(parent, vars) ::= <<
<parent.kubectlCmd> config set-context <vars.cluster.context.name> --cluster=<vars.cluster.cluster.group> --user=<vars.cluster.cluster.group>-<vars.cluster.credentials.name>

>>

kubeCa(parent, vars) ::= <%
<if(vars.tls)><if(vars.tls.ca)>--certificate-authority=<vars.certsDir>/<vars.tls.caName><endif><endif>
%>

kubeCert(parent, vars) ::= <%
<if(vars.tls)><if(vars.tls.cert)>--client-certificate=<vars.certsDir>/<vars.tls.certName><endif><endif>
%>

kubeKey(parent, vars) ::= <%
<if(vars.tls)><if(vars.tls.key)>--client-key=<vars.certsDir>/<vars.tls.keyName><endif><endif>
%>

kubectlCmd(parent, vars) ::= <<
<setupKubectl(parent, vars)>
<parent.kubectlCmd> <vars.args>

>>

clusterServer(parent, vars) ::= <%
<vars.cluster.proto>://<vars.cluster.host>:<vars.cluster.port>
%>
