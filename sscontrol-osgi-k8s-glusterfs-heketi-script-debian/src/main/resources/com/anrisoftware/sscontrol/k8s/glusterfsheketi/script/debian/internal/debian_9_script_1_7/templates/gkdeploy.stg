/*
 * Mandatory:
 *
 * vars.topologyFile
 * vars.templatesDir
 * vars.glusterfsScript.glusterKubernetesDeployCommand
 * vars.glusterfsScript.service.admin.key
 * vars.glusterfsScript.service.user.key
 *
 * Optional:
 *
 * parent.debugGkdeploy
*/
gkdeployCmd(parent, vars) ::= <<
set -e
echo 'Run with topology <vars.topologyFile>:'
cat <vars.topologyFile>

gkdeploy_out=`mktemp`
trap "rm -f $gkdeploy_out" EXIT

set +e

<if(parent.debugGkdeploy)>bash -x <endif><vars.glusterfsScript.glusterKubernetesDeployCommand> -g --yes \\
-c kubectl \\
-t <vars.templatesDir> \\
--admin-key <vars.glusterfsScript.service.admin.key> \\
--user-key <vars.glusterfsScript.service.user.key> \\
-n <vars.glusterfsScript.service.namespace> \\
--daemonset-label <vars.glusterfsScript.service.labelName> \\
<vars.topologyFile> | tee $gkdeploy_out

set -e

if cat $gkdeploy_out | grep "pod not found.">/dev/null; then
exit 1
fi

if cat $gkdeploy_out | grep "pods not found.">/dev/null; then
exit 1
fi

if cat $gkdeploy_out | grep "Please destroy existing setup and try again.">/dev/null; then
<vars.glusterfsScript.glusterKubernetesDeployCommand> -g --yes \\
-c kubectl \\
-t <vars.templatesDir> \\
--admin-key <vars.glusterfsScript.service.admin.key> \\
--user-key <vars.glusterfsScript.service.user.key> \\
-n <vars.glusterfsScript.service.namespace> \\
--daemonset-label <vars.glusterfsScript.service.labelName> \\
--load \\
<vars.topologyFile>
fi

>>
