/*
 *
 */
storageClass(parent, vars) ::= <<
apiVersion: storage.k8s.io/v1beta1
kind: StorageClass
metadata:
  name: <parent.service.storage.name>
  annotations:
    storageclass.beta.kubernetes.io/is-default-class: "<parent.service.storage.isDefault>"
  labels:
    robobeerun.com/group: glusterfs-heketi
provisioner: kubernetes.io/glusterfs
parameters:
  resturl: "http://<parent.service.storage.restAddress>"
  restuser: "<parent.service.storage.restUser>"
  restuserkey: "<parent.service.storage.restKey>"

>>

/*
 *
 */
createStorageClass(parent, vars) ::= <<
if <parent.kubectlCmd> get sc <parent.service.storage.name>; then
    <parent.kubectlCmd> delete sc <parent.service.storage.name>
fi
<parent.kubectlCmd> create -f <vars.file>
>>

/*
 *
 */
testStorageClass(parent, vars) ::= <<
set -xe

function delete_pvc {
    if <parent.kubectlCmd> get pvc test; then
        <parent.kubectlCmd> delete pvc test
    fi
}

pvc_yaml=`mktemp`
trap "rm -f $pvc_yaml; delete_pvc" EXIT

cat \<\<EOF > $pvc_yaml
<pvcManifest(parent, vars)>
EOF

delete_pvc
<parent.kubectlCmd> create -f $pvc_yaml
s=300
until <parent.kubectlCmd> get pvc -l robobeerun.com/group=glusterfs-heketi-test|grep Bound && [[ ${s} -ne 0 ]]; do
    sleep 5
    ((s-=5))
done

if [[ ${s} -eq 0 ]]; then
    exit 1
else
    exit 0
fi

>>

/*
 *
 */
pvcManifest(parent, vars) ::= <<
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: test
  annotations:
    volume.beta.kubernetes.io/storage-class: <parent.service.storage.name>
  labels:
    robobeerun.com/group: glusterfs-heketi-test
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: <parent.service.minBrickSizeGb>Gi

>>
