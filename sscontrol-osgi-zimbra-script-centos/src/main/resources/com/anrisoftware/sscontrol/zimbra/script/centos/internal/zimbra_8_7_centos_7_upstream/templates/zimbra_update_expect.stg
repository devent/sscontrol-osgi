updateZimbra(parent, vars) ::= <<
cd "<vars.zimbraDir>"
cat \<\<'EOF' > script.exp
#!/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Jun 28 23:53:59 2017
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
                          ;# script wasn't run conservatively originally
if {\$force_conservative} {
        set send_slow {1 .1}
        proc send {ignore arg} {
                sleep .1
                exp_send -s -- \$arg
        }
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

set timeout -1
set timeout <parent.timeoutShort;format="seconds">
spawn ./install.sh
match_max 100000
expect -exact "Do you agree with the terms of the software license agreement? \[N\] " 
send -- "y\r" 
expect -exact "Do you want to verify message store database integrity? \[Y\] " 
send -- "y\r" 
expect -exact "Use Zimbra's package repository \[Y\] " 
send -- "y\r" 
expect -exact "Do you wish to upgrade? \[Y\] " 
send -- "y\r" 
expect -exact "The system will be modified.  Continue? \[N\] " 
send -- "y\r" 
set timeout <parent.timeoutLong;format="seconds">
expect -exact "Notify Zimbra of your installation? \[Yes\] " 
send -- "no" 
expect -exact "no" 
send -- "\r" 
expect -exact "Configuration complete - press return to exit " 
send -- "\r" 
EOF

expect -f script.exp

>>
