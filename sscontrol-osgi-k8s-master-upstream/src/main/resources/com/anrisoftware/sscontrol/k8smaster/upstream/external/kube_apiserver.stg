kubeApiserverManifest(parent, vars) ::= <<
# Auto-Generated from Robobee
# Authors
# https://github.com/coreos/coreos-kubernetes/blob/master/multi-node/generic/controller-install.sh
#
# <parent.manifestsDir>/kube-apiserver.yml
apiVersion: v1
kind: Pod
metadata:
  name: kube-apiserver
  namespace: kube-system
spec:
  hostNetwork: true
  containers:
  - name: kube-apiserver
    image: <parent.hypercubeImageRepo>:<parent.kubernetesVersion>
    command:
    - /hyperkube
    - apiserver
    - --bind-address=0.0.0.0
<etcdPlugin(parent, vars)>
<etcdTls(parent, vars)>
    - --allow-privileged=true
    - --service-cluster-ip-range=<parent.service.cluster.serviceRange>
    - --insecure-port=8080
    - --secure-port=443
    - --advertise-address=<parent.service.cluster.advertiseAddress>
    - --admission-control=<parent.service.admissions;separator=",">
    - --tls-cert-file=<if(parent.service.tls.cert)><parent.certsDir>/<parent.service.tls.certName><endif>
    - --tls-private-key-file=<if(parent.service.tls.key)><parent.certsDir>/<parent.service.tls.keyName><endif>
<parent.service.authentications:{a|<(a.class.simpleName)(parent, vars, a)>}>
    - --runtime-config=extensions/v1beta1/networkpolicies=true
    - --anonymous-auth=false
    livenessProbe:
      httpGet:
        host: 127.0.0.1
        port: 8080
        path: /healthz
      initialDelaySeconds: 15
      timeoutSeconds: 15
    ports:
    - containerPort: 443
      hostPort: <parent.service.binding.port>
      name: https
    - containerPort: 8080
      hostPort: <parent.service.binding.insecurePort>
      name: local
    volumeMounts:
    - mountPath: /etc/kubernetes/ssl
      name: ssl-certs-kubernetes
      readOnly: true
    - mountPath: /etc/ssl/certs
      name: ssl-certs-host
      readOnly: true
  volumes:
  - hostPath:
      path: /etc/kubernetes/ssl
    name: ssl-certs-kubernetes
  - hostPath:
      path: /usr/share/ca-certificates
name: ssl-certs-host

>>

etcdPlugin(parent, vars) ::= <<
    - --etcd-servers=<parent.pluginsTargets.etcd:{h|<h.protocol>://<h.host>:<h.port>};separator=",">
>>

etcdTls(parent, vars) ::= <<
<if(parent.etcdTls)><if(parent.etcdTls.ca)>    - --etcd-cafile=<parent.certsDir>/<parent.etcdTls.caName> <endif>
<if(parent.etcdTls.cert)>    - --etcd-certfile=<parent.certsDir>/<parent.etcdTls.certName> <endif>
<if(parent.etcdTls.key)>    - --etcd-keyfile=<parent.certsDir>/<parent.etcdTls.keyName> <endif>
<endif>
>>

ClientCertsAuthenticationImpl(parent, vars, a) ::= <<
    - --client-ca-file=<parent.certsDir>/<a.caName>
>>
